*. all methods, including added, removed and changed are detected
    - add means exist in new commit but not old one
    - remove means exist in old commit and removed in the new one
    - change means exist in both new and old commits


*. we consider everything as method signature including identifiers like static and public, return type, input parameters
    and even name of parameters (we know that return type and parameter name is not a part of method signature - this is
    just a decision to include them in)


*. because of method overloading, we may have multiple changes for a single method.
old file:
    void method1(int x)
new file:
    void method1(int x, int y)
    void method1(int x, string s)
result contains two records:
    void method1(int x)     changed    to    void method1(int x, int y)
    void method1(int x)     changed    to    void method1(int x, string s)


*. in java each class can have multiple constructors. we treat them just like methods


*. since columns in csv files are separated by comma "," and because in java, method parameters are separated by comma
    too, we replace java parameter separator with semi colon ";"


*. since in git all files are treated as plain text and because in java, methods can be broken into multiple lines,
    in order to have complete signature of methods, we build changed java files for each commit (notice that just the
    CHANGED files with JAVA extension will be built - for example txt files will be excluded)


*. since we build each java file and parse it, the files with compilation error like forgetting to put "class" identifier
    will be excluded from results


*. Some files may be deleted or added in a commit, since the file does not exist anymore in either old or new commit,
    they will be excluded from the results


*. the first commit will not be included in result since there is nothing to compare it with


*. in the process of developing a project, packages can be renamed. so, you may find a record in result which its file
    does not exist in the current working packages


*. Since java has primitive data types like "int" in addition to corresponding class types like "Integer", we consider
    these as two different data types and a method change will be detected because of changing parameter from int to Integer


*. one of java features is to create classes inside other classes (inner classes). in this version, we excluded changes
	to the methods of inner classes


*. each git repository can have multiple branches with different chains of commits. in this version we just inspect changes
    in the current main branch (HEAD or master)